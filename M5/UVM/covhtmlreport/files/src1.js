var g_data = {"name":"fifo_bfm.sv","src":"/*********************************************\r\n//	Interface for the Asynchronous FIFO\r\n//	Contains external signals for the FIFO \r\n//	and internal signals for the BFM. Also\r\n//	contains a reset_fifo task to reset the \r\n//	FIFO and generate both the write and read \r\n// 	clocks for our two domains\r\n//\r\n//	Author: Alexander Maso\r\n//	 \r\n*********************************************/\r\n\r\ninterface fifo_bfm;\r\n	import fifo_pkg::*;\r\n\r\n	//External FIFO signals\r\n	logic clk_wr, clk_rd, rst_n;\r\n	logic wr_en, rd_en;\r\n	logic [DATA_WIDTH-1:0] data_in, data_out;\r\n	logic full, empty, half;\r\n	\r\n	//Internal FIFO signals\r\n	/*\r\n	logic [ADDR_WIDTH:0] wptr;\r\n	logic [ADDR_WIDTH:0] rptr;\r\n	logic [ADDR_WIDTH-1:0] waddr;\r\n	logic [ADDR_WIDTH-1:0] raddr;\r\n	logic [ADDR_WIDTH:0] wq2_rptr;\r\n	logic [ADDR_WIDTH:0] rq2_wptr;\r\n	*/\r\n\r\n	// Clock Generation for Write and Read domains\r\n	initial begin\r\n		clk_wr = 1'b0;\r\n		forever begin\r\n			#(CYCLE_TIME_WR/2) clk_wr = ~clk_wr;\r\n		end\r\n	end\r\n	initial begin\r\n		clk_rd = 1'b0;\r\n		forever begin\r\n			#(CYCLE_TIME_RD/2) clk_rd = ~clk_rd;\r\n		end\r\n	end\r\n\r\n	// Reset uses the slower, read clock\r\n	task reset_fifo();\r\n	    @(negedge clk_rd);\r\n	    rst_n = 1'b0;\r\n	    @(negedge clk_rd);\r\n	    wr_en = 1'b0;\r\n	    rd_en = 1'b0;\r\n	    @(posedge clk_rd);\r\n	    rst_n = 1'b1;\r\n	endtask : reset_fifo\r\n\r\n    initial begin\r\n        reset_fifo();\r\n    end\r\n\r\nendinterface\r\n\r\n\r\n","lang":"verilog"};
processSrcData(g_data);