var g_data = {"name":"dut/fifo_top.sv","src":"module fifo_top #(\n    parameter DATA_WIDTH = 8,\n    parameter ADDR_WIDTH = 6  // Log2 of FIFO depth 64\n)(\n    input  logic                   clk_wr, clk_rd, rst_n,\n    input  logic                   wr_en, rd_en,\n    input  logic [DATA_WIDTH-1:0]  data_in,\n    output logic [DATA_WIDTH-1:0]  data_out,\n    output logic                   full, empty, half\n);\n\n    // Internal signals for fifo_top\n    logic [ADDR_WIDTH:0] wptr, rptr;\n    logic [ADDR_WIDTH-1:0] waddr, raddr;\n    logic [ADDR_WIDTH:0] wq2_rptr, rq2_wptr;\n\n	// Importing interface of signals internal to the FIFO\n	fifo_bfm bfm();\n\n    // Memory\n    fifo_memory #(.DATA_WIDTH(DATA_WIDTH), .ADDR_WIDTH(ADDR_WIDTH)) mem_inst (\n        .clk_wr(clk_wr),\n        .clk_rd(clk_rd),\n        .waddr(waddr),\n        .raddr(raddr),\n        .data_in(data_in),\n        .data_out(data_out),\n        .wr_en(wr_en & ~full),\n        .rd_en(rd_en & ~empty),\n        .half(half)\n    );\n\n    // Write Pointer and Full Flag Logic\n    write_pointer #(.ADDR_WIDTH(ADDR_WIDTH)) write_ptr (\n        .clk(clk_wr),\n        .rst_n(rst_n),\n        .inc(wr_en),\n        .wptr(wptr),\n        .waddr(waddr),\n        .wq2_rptr(wq2_rptr),\n        .full(full)\n    );\n\n    // Read Pointer and Empty Flag Logic\n    read_pointer #(.ADDR_WIDTH(ADDR_WIDTH)) read_ptr (\n        .clk(clk_rd),\n        .rst_n(rst_n),\n        .inc(rd_en),\n        .rptr(rptr),\n        .raddr(raddr),\n        .rq2_wptr(rq2_wptr),\n        .empty(empty)\n    );\n\n    // Synchronization from write to read domain\n    sync #(.ADDR_WIDTH(ADDR_WIDTH)) sync_w2r (\n        .clk(clk_rd),\n        .rst_n(rst_n),\n        .data_in(wptr),\n        .data_out(rq2_wptr)\n    );\n\n    // Synchronization from read to write domain\n    sync #(.ADDR_WIDTH(ADDR_WIDTH)) sync_r2w (\n        .clk(clk_wr),\n        .rst_n(rst_n),\n        .data_in(rptr),\n        .data_out(wq2_rptr)\n    );\n\nendmodule      \n       \n       \n       \n       \n       \n       \n","lang":"verilog"};
processSrcData(g_data);