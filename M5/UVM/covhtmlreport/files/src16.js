var g_data = {"name":"dut/write_pointer.sv","src":"module write_pointer #(\n    parameter ADDR_WIDTH = 6\n)(\n    input  logic                    clk, rst_n, inc,\n    input  logic [ADDR_WIDTH:0]     wq2_rptr,\n    output logic [ADDR_WIDTH:0]     wptr,\n    output logic [ADDR_WIDTH-1:0]   waddr,\n    output logic                    full\n);\n\n    logic   [ADDR_WIDTH:0]  binary_wptr;\n    logic   [ADDR_WIDTH:0]  binary_wptr_next, gray_wptr_next;\n    logic                   full_next;\n\n    always_ff @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            wptr <= 0;\n            binary_wptr <= 0;\n            full <= 0;\n        end\n        else begin \n            wptr <= gray_wptr_next;\n            binary_wptr <= binary_wptr_next;\n            full <= full_next;\n        end\n    end\n\n    assign waddr = binary_wptr[ADDR_WIDTH-1:0];\n    assign binary_wptr_next = binary_wptr + (inc & ~full);\n    assign gray_wptr_next = (binary_wptr_next>>1) ^ binary_wptr_next;\n\n    assign full_next =  ((gray_wptr_next[ADDR_WIDTH-2:0] == wq2_rptr[ADDR_WIDTH-2:0]) &&\n                        (gray_wptr_next[ADDR_WIDTH-1:0] != wq2_rptr[ADDR_WIDTH-1:0]) && \n                        (gray_wptr_next[ADDR_WIDTH] != wq2_rptr[ADDR_WIDTH]));\n\n    \nendmodule\n\n","lang":"verilog"};
processSrcData(g_data);