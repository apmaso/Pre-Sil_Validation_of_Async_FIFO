var g_data = {"name":"dut/read_pointer.sv","src":"module read_pointer #(\n    parameter ADDR_WIDTH = 6\n)(\n    input  logic                    clk, rst_n, inc,\n    input  logic [ADDR_WIDTH:0]     rq2_wptr,\n    output logic [ADDR_WIDTH:0]     rptr, \n    output logic [ADDR_WIDTH-1:0]   raddr,\n    output logic                    empty\n);\n\n    logic [ADDR_WIDTH:0]    gray_rptr_next;\n    logic [ADDR_WIDTH:0]    binary_rptr, binary_rptr_next;\n    logic                   empty_next;\n\n    always_ff @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            rptr <= 0;\n            binary_rptr <= 0;\n            empty <= 1;\n        end\n        else begin\n            rptr <= gray_rptr_next;\n            binary_rptr <= binary_rptr_next;\n            empty <= empty_next;\n        end\n    end\n\n    assign empty_next = (gray_rptr_next == rq2_wptr);\n    assign gray_rptr_next = (binary_rptr_next >> 1) ^ binary_rptr_next;\n    assign binary_rptr_next = binary_rptr + (inc & ~empty);\n    assign raddr = binary_rptr[ADDR_WIDTH-1:0];\n\nendmodule\n","lang":"verilog"};
processSrcData(g_data);